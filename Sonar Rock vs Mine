import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection and data Processing"""

sonar_data=pd.read_csv('/content/Copy of sonar data.csv', header=None)

sonar_data.head()

"""#number of rows and cols"""

sonar_data.shape

sonar_data.describe()

sonar_data[60].value_counts()

"""M > Mine
R > Rock
"""

sonar_data.groupby(60).mean()

#separating labels and data
X = sonar_data.drop(columns=60,axis=1)
Y = sonar_data[60]

print(X)
print(Y)

"""training and test data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.1, stratify=Y, random_state=1)

print(X.shape, X_train.shape, X_test.shape)

print(X_train)
print(Y_train)

model=LogisticRegression()
#training the model
model.fit(X_train, Y_train)

"""Model Evalutaion"""

#accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy on training data :', training_data_accuracy)

#accuracy on test data
X_test_prediction=model.predict(X_test)
test_data_accuracy= accuracy_score(X_test_prediction, Y_test)

print('Accuracy on test data :', test_data_accuracy)

"""Predictive System"""

input_data=()
#changing the input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

#reshape the np array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if(prediction[0]=='R'):
  print('The Object is a Rock')
else :
  print('The Object is a Mine')
